from io import BufferedReader
from numpy import ndarray
import moviepy.editor as mpe
from typing import overload, List, Tuple, Literal, Any
from .units import ASCII_CHARS

init_multiprocessing: bool

PATH = str
WAV_FILE_BYTES = bytes

class TempDetected:
    files: List[str]
    
    def __init__(self) -> None: ...
    def append(self, path: str) -> None: ...
    def clear(self) -> None: ...

TEMP_DETECTOR = TempDetected()

class AVP:
    ascii_chars_gradient: List[str]
    path: PATH
    video: mpe.VideoFileClip
    
    @overload
    def __init__(self, fp: str, ascii_chars: List[str]=ASCII_CHARS) -> None: ...
    @overload
    def __init__(self, fp: bytes, ascii_chars: List[str]=ASCII_CHARS) -> None: ...
    @overload
    def __init__(self, fp: BufferedReader, ascii_chars: List[str]=ASCII_CHARS) -> None: ...
    
    @staticmethod
    def _callback(complited: int, total: int) -> None: ...
    
    @overload
    def get_audio(self, tp: Literal["file"], filepath: str=None) -> PATH: ...
    @overload
    def get_audio(self, tp: Literal["bytes"]) -> WAV_FILE_BYTES: ...
    @overload
    def get_audio(self, tp: Literal["array"]) -> ndarray: ...
    @overload
    def get_audio(self, tp: Any) -> None: ...

    def get_frames_count(self) -> int:
        """Returns the number of `frames`"""
        ...

    def get_ascii_frames(self, frame_size: Tuple[int, int], callback=_callback) -> List[str]: ...
    def get_ascii_frames_threading(self, frame_size: Tuple[int, int], callback=_callback) -> List[str]: ...
    def get_ascii_frames_multiprocessing(self, frame_size: Tuple[int, int], callback=_callback) -> List[str]: ...
    def get_fps(self) -> int: ...
    def set_fps(self, fps: int) -> None: ...